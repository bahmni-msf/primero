# Copyright (c) 2014 - 2023 UNICEF. All rights reserved.

name: App
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      solr_image_name:
        description: 'Solr Image Name'
        required: true
        default: 'solr'

      nginx_image_name:
        description: 'Nginx Image Name'
        required: true
        default: 'nginx'
jobs:
  build-publish-solr:
    name: Build & Publish Solr
    if: github.event_name != 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Pull Github code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Solr Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: bahmni-msf-primer/solr
        run: |
          cd docker && ./build.sh ${{ github.event.inputs.solr_image_name }}
          docker images

  docker-build-publish:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Docker Build & Publish
    runs-on: ubuntu-latest
    steps:
      - name: Pull Github code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: bahmni-msf/primero

        run: |
          docker build --build-arg APP_ROOT=/srv/primero/application --build-arg RAILS_LOG_PATH=/srv/primero/application/log/primero --build-arg APP_UID=1000 --build-arg APP_GID=1000 -t primero:latest -f  docker/application/Dockerfile .

      - name: Set Image tag variable
        run: |
          echo "ARTIFACT_VERSION=1.0.0-$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Tag and Push docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: bahmni-msf/primero
          IMAGE_TAG: ${{ env.ARTIFACT_VERSION }}
        run: |
          docker tag primero:latest $ECR_REGISTRY/$REPOSITORY:latest
          docker tag primero:latest $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$REPOSITORY:latest

  deploy-to-qa:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Deploy
    runs-on: ubuntu-latest
    needs: [docker-build-publish]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Get public IP
        id: ip
        uses: haythem/public-ip@v1.2
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.BAHMNI_LITE_AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      - name: Deploy to QA
        env:
          PRIVATE_KEY: ${{ secrets.BAHMNI_LITE_AWS_SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.BAHMNI_LITE_AWS_SSH_HOST }}
          USER_NAME: ${{ secrets.BAHMNI_LITE_AWS_SSH_USER_NAME }}
          EC2_IP: ${{ secrets.EC2_PRIMERO_IP }}
        run: |
          echo "$PRIVATE_KEY" > ~/private_key.pem && chmod 400 ~/private_key.pem
          ssh -i ~/private_key.pem -o StrictHostKeyChecking=no ${USER_NAME}@${HOSTNAME} '
          echo "${{secrets.BAHMNI_LITE_AWS_SSH_PRIVATE_KEY}}" > ~/private_key.pem && chmod 400 ~/private_key.pem
          ssh -i ~/private_key.pem ubuntu@${{secrets.EC2_PRIMERO_IP}} "
            sudo su
            sudo aws ecr get-login-password --region ap-south-1 | sudo docker login --username AWS --password-stdin 485402728093.dkr.ecr.ap-south-1.amazonaws.com
            sudo docker compose pull
            sudo docker compose up -d
          "
          rm ~/private_key.pem
          '
