# Copyright (c) 2014 - 2023 UNICEF. All rights reserved.

name: App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to refer for variables and secrets"
        required: true
        default: "QA_EC2"
      branch:
        description: "Branch to deploy from (default: ecs-github-workflow)"
        required: true
        default: "ecs-github-workflow"
      build:
        description: "Whether to build or not"
        required: false
        default: "true"
      deploy:
        description: "Whether to deploy or not"
        required: false
        default: "true"
      image-name:
        description: "Whether to deploy or not"
        required: false
        default: "application"
      ecr-repo:
        description: "Whether to deploy or not"
        required: false
        default: ""

jobs:
  docker-build-publish:
    name: Docker Build & Publish
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build == 'true' }}
    environment:  ${{ github.event.inputs.environment }}
    outputs:
      image-name: ${{ steps.build-and-push.outputs.image-name }}
    steps:
      - name: Pull Github code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Image tag variable
        run: |
          pwd
          echo $GITHUB_RUN_NUMBER
          echo "ARTIFACT_VERSION=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Build and Push Docker Image to ECR
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.ARTIFACT_VERSION }}
        run: |
          # Run your docker build and push commands here
          # Store the generated image names
          IMAGE_NAMES=$(./docker/build.sh "${{ github.event.inputs.image-name }}" -d "${{ steps.login-ecr.outputs.registry }}" -t "${IMAGE_TAG}" -r "${{ github.event.inputs.ecr-repo }}")
          echo "IMAGE_NAMES=$IMAGE_NAMES"  >> "$GITHUB_ENV"
          echo "image-name=$IMAGE_NAMES" >> $GITHUB_OUTPUT

  deploy-to-qa:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build == 'true' }}
    environment:  ${{ github.event.inputs.environment }}
    needs: [docker-build-publish]
    steps:      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
  
      - name: Get public IP
        id: ip
        uses: haythem/public-ip@v1.2
  
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.POTM_AWS_SG_ID }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
  
      - name: Deploy to QA
        env:
          PRIVATE_KEY: ${{ secrets.POTM_AWS_SSH_PRIVATE_KEY }}
          HOSTNAME: ${{ secrets.POTM_AWS_SSH_HOST }}
          USER_NAME: ${{ secrets.POTM_AWS_SSH_USER_NAME }}
          EC2_IP: ${{ secrets.EC2_POTM_IP }}
          SERVICE_NAME: ${{ github.event.inputs.image-name }}
          IMAGE_NAME: ${{ needs.docker-build-publish.outputs.image-name }}
        run: |
          # Create a temporary directory for storing the SSH private key
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.POTM_AWS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      
          # Disable strict host key checking to avoid interactive prompt
          ssh_options="-o StrictHostKeyChecking=no"
      
          # SSH into the intermediate host (HOSTNAME) and execute commands securely
          ssh ${ssh_options} -i ~/.ssh/id_rsa ${USER_NAME}@${HOSTNAME} << 'EOF'
          # Securely execute commands on the intermediate host
          ssh ${ssh_options} ubuntu@${EC2_IP} << 'INNER_EOF'
          # Securely execute commands on the EC2 instance
              # Change directory to your repository
              cd /home/ubuntu/primero
  
              # Checkout the specified branch
              git fetch origin ${{ github.event.inputs.branch }}
              git checkout ${{ github.event.inputs.branch }}
  
              # Login to AWS ECR securely
              aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 485402728093.dkr.ecr.ap-south-1.amazonaws.com
  
              # Replace image value in the Docker Compose file on the remote server
              sed -i "s|image:.*${SERVICE_NAME}.*|image: ${IMAGE_NAME}|" /home/ubuntu/primero/docker/docker-compose.yml
  
              # Pull and start the updated containers using Docker Compose
              # docker-compose -f /home/ubuntu/primero/docker/docker-compose.yml pull
              # docker-compose -f /home/ubuntu/primero/docker/docker-compose.yml up -d

              # Change directory to your repository
              cd /home/ubuntu/primero/docker

              ./compose.configure.sh
              ./compose.prod.sh up -d

          INNER_EOF
          EOF
      
          # Clean up the temporary directory
          rm -rf ~/.ssh