# .github/workflows/deploy-ecs.yml

name: Deploy to ECS

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: 'Environment to deploy to (Example: qa, staging, production)'
        required: false
        # default: 'qa'
      branch:
        type: string
        description: 'Branch to deploy from (default: ecs-github-workflow)'
        required: false
        # default: 'ecs-github-workflow'
      services-json:
        type: string
        description: 'Which service or services to deploy in ecs'
        required: false
        # default: '[ { "service_name": "Application", "task_definition": "docker/environment/$ENVIRONMENT/task_definition/application.json", "container_name": "application", "image": "" }, { "service_name": "Nginx", "task_definition": "docker/environment/$ENVIRONMENT/task_definition/nginx.json", "container_name": "nginx", "image": "" } ]'
      cluster:
        type: string
        description: 'Which Cluster to deploy'
        required: false
        # default: 'POTMDev'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (Example: qa, staging, production)'
        required: true
        default: 'qa'
      branch:
        description: 'Branch to deploy from (default: ecs-github-workflow)'
        required: true
        default: 'ecs-github-workflow'
      services-json:
        description: 'Which service or services to deploy in ecs'
        required: true
        default: '[ { "service_name": "Application", "task_definition": "docker/environment/$ENVIRONMENT/task_definition/application.json", "container_name": "application", "image": "" }, { "service_name": "Nginx", "task_definition": "docker/environment/$ENVIRONMENT/task_definition/nginx.json", "container_name": "nginx", "image": "" } ]'
      cluster:
        description: 'Which Cluster to deploy'
        required: true
        default: 'POTMDev'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ join(github.event.inputs.environment, github.event.inputs.cluster, '_') }}    # environment: QA_POTMDev ### we can create environments specific to site and environment e.g QA_Iraq

    env:
      ECS_CLUSTER: ${{ github.event.inputs.cluster }}
      SERVICES: ${{ github.event.inputs.services-json }}
      BRANCH: ${{ github.event.inputs.branch }}

    steps:
      - name: Pull Github code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update task definition and deploy ECS service
        run: |
          chmod +x $GITHUB_WORKSPACE/docker/update_ecs_service.sh
          $GITHUB_WORKSPACE/docker/update_ecs_service.sh
        env:
          ENV_BUCKET: ${{ secrets.ENV_BUCKET }}
          Role_ARN: ${{ secrets.Role_ARN }}
          FS_ID: ${{ secrets.FS_ID }}
          ENVIRONMENT: ${{ github.event.inputs.environment }}
        continue-on-error: false