name: Build And Publish Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (Example: qa, staging, production)'
        required: true
        default: 'qa'
      branch:
        description: 'Branch to deploy from (default: ecs-github-workflow)'
        required: true
        default: 'ecs-github-workflow'
      build:
        description: 'Whether to build or not'
        required: false
        default: 'true'
      deploy:
        description: 'Whether to deploy or not'
        required: false
        default: 'false'
      image-names:
        description: 'Names of the Docker images (comma-separated, e.g., "application,nginx,solr,all" or single values "application")'
        required: false
        default: 'application'
      services-json:
        type: string
        description: 'Which service or services to deploy in ecs'
        required: false
        default: '[ { "service_name": "Application", "task_definition": "docker/environment/$ENVIRONMENT/task_definition/application.json", "container_name": "application", "image": "$ECR_URI/potm/application" }, { "service_name": "Nginx", "task_definition": "docker/environment/$ENVIRONMENT/task_definition/nginx.json", "container_name": "nginx", "image": "$ECR_URI/potm/nginx" } ]'
      cluster:
        type: string
        description: 'Which Cluster to deploy'
        required: false
        default: 'POTMDev'

        #repoName

env:
  IMAGE_NAMES: ${{ github.event.inputs.image-names }}

jobs:

  docker-build-publish:
    name: Docker Build & Publish
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build == 'true' }}
    steps:
      - name: Pull Github code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.environment == 'qa' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.environment == 'staging' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure AWS Credentials
        if: ${{ github.event.inputs.environment == 'production' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PROD_AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract ECR URI
        run: echo "ECR_URI=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV

      - name: Set ECR_URI as output
        run: echo "::set-output name=ecr-uri::${{ steps.login-ecr.outputs.registry }}"

      - name: Set Image tag variable
        run: |
          pwd
          echo $GITHUB_RUN_NUMBER
          echo "ARTIFACT_VERSION=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV
          echo $GITHUB_WORKSPACE

      - name: Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.ARTIFACT_VERSION }}
        run: |
          IMAGE_LIST=$(./docker/build.sh "${IMAGE_NAMES}" -r "${ECR_REGISTRY}" -t "${IMAGE_TAG}")
          # Save the list of images to a file
          echo "$IMAGE_LIST" > image-names.txt

      - name: Save Image Names as Artifact
        if: always()
        run: |
          # Ensure the file exists before attempting to save it as an artifact
          if [ -f "image-names.txt" ]; then
            cat image-names.txt
          else
            echo "Image names file not found."
            exit 1
          fi
        working-directory: ${{ github.workspace }}

      # Upload the file as an artifact
      - name: Upload Image Names Artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: image-names
          path: image-names.txt

      #Service-json: image, ecr uri,repo - {{ECR}}/{{ECR_REPO}}/{{ImageTag}} - matrix

  Deploy:
      if: ${{ github.event.inputs.deploy == 'true' }}
      needs: [docker-build-publish]
      steps:
        - name: Deploy using external action
          uses: bahmni-msf/primero/.github/workflows/deploy-ecs.yml@ecs-github-workflow
          with:
            environment: ${{ github.event.inputs.environment }}
            branch: ${{ github.event.inputs.branch }}
            cluster: ${{ github.event.inputs.cluster }}
            image-names: ${{ github.event.inputs.image-names }}
            services-json: ${{ github.event.inputs.services-json }}
          secrets: inherit

        - name: Get ECR_URI from job1
          run:
            echo "ECR_URI from job1: ${{ needs.job1.outputs.ecr-uri }}"