name: Build And Publish Image

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (Example: qa, staging, production)'
        required: true
        default: 'qa'
      branch:
        description: 'Branch to deploy from (default: ecs-github-workflow)'
        required: true
        default: 'ecs-github-workflow'
      build:
        description: 'Whether to build or not'
        required: false
        default: 'true'
      deploy:
        description: 'Whether to deploy or not'
        required: false
        default: 'false'
      services-json:
        description: 'JSON file containing service definitions'
        required: true
        default: '[ { "service_name": "application", "task_definition": "docker/environment/qa/task_definition/application.json", "container_name": "Application", "image": "", "image-name": "application", "ecr-repo": "potm/application" }, { "service_name": "nginx", "task_definition": "docker/environment/qa/task_definition/nginx.json", "container_name": "Nginx", "image": "", "image-name": "nginx", "ecr-repo": "potm/nginx" } ]'
      cluster:
        type: string
        description: 'Which Cluster to deploy'
        required: false
        default: 'POTMDev'

jobs:
  docker-build-publish:
    name: Docker Build & Publish
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.build == 'true' }}
    environment: ${{ github.event.inputs.environment + '_' + github.event.inputs.cluster }}
    strategy:
      matrix:
        service: ${{fromJson(needs.parse-services.outputs.services)}}
    steps:
      - name: Pull Github code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set Image tag variable
        run: |
          pwd
          echo $GITHUB_RUN_NUMBER
          echo "ARTIFACT_VERSION=$GITHUB_RUN_NUMBER" >> $GITHUB_ENV

      - name: Build and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.ARTIFACT_VERSION }}
        run: |
          # Run your docker build and push commands here
          # Store the generated image names
          IMAGE_NAMES=$(./docker/build.sh "${{ matrix.service.image-name }}" -b "${{ steps.login-ecr.outputs.registry }}" -t "${IMAGE_TAG}" -r "${{ matrix.service.ecr-repo }}")
          echo "::set-output name=image-name::${IMAGE_NAMES}"

  parse-services:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.get-services.outputs.services }}
    steps:
      - name: Get service definitions
        id: get-services
        run: |
          echo "${{ github.event.inputs.services-json }}" > services.json
          cat services.json
        shell: bash

  update-service-json:
    if: ${{ github.event.inputs.deploy == 'true' }}
    needs: [docker-build-publish]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{fromJson(needs.parse-services.outputs.services)}}
    steps:
      - name: Update service definitions with image names
        id: update-services
        run: |
          # Update the image field in the services JSON with the generated image names
          IMAGE_NAMES=$(echo "${{ needs.docker-build-publish.outputs.image-name }}" | tr -d '\n')
          jq '.[].image = $image_names' --arg image_names "$IMAGE_NAMES" services.json > updated_services.json
          cat updated_services.json
          echo "::set-output name=services-json::$(<updated_services.json)"
        shell: bash

  deploy_to_ecs:
    if: ${{ github.event.inputs.deploy == 'true' }}
    needs: [update-service-json]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to ECS
        uses: bahmni-msf/primero/.github/workflows/deploy-ecs.yml@${{ github.event.inputs.branch }}
        with:
          environment: ${{ github.event.inputs.environment }}
          branch: ${{ github.event.inputs.branch }}
          cluster: ${{ github.event.inputs.cluster }}
          image-names: ${{ github.event.inputs.image-names }}
          services-json: ${{ needs.deploy.outputs.services-json }}
        secrets: inherit

  # Deploy:
  #   if: ${{ github.event.inputs.deploy == 'true' }}
  #   needs: [docker-build-publish]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       service: ${{fromJson(needs.parse-services.outputs.services)}}
  #   steps:
  #     - name: Update service definitions with image names
  #       id: update-services
  #       run: |
  #         # Update the image field in the services JSON with the generated image names
  #         IMAGE_NAMES=$(echo "${{ needs.docker-build-publish.outputs.image-name }}" | tr -d '\n')
  #         jq '.[].image = $image_names' --arg image_names "$IMAGE_NAMES" services.json > updated_services.json
  #         cat updated_services.json
  #       shell: bash

  #     - name: Deploy to ECS
  #       uses: bahmni-msf/primero/.github/workflows/deploy-ecs.yml@${{ github.event.inputs.branch }}
  #       with:
  #         environment: ${{ github.event.inputs.environment }}
  #         branch: ${{ github.event.inputs.branch }}
  #         cluster: ${{ github.event.inputs.cluster }}
  #         services-json: ${{ steps.update-services.outputs.stdout }}
  #       secrets: inherit
